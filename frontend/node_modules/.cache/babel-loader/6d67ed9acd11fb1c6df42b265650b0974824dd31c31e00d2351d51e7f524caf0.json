{"ast":null,"code":"import { transformPost } from '../transformers';\nexport const getPosts = async (searchPhrase, page, limit) => {\n  const searchQueryMain = 'http://localhost:3005/posts';\n  try {\n    return fetch(searchQueryMain).then(response => response.json()).then(loadedPosts => {\n      // Фильтруем статьи по заголовку\n      const filteredPosts = loadedPosts.filter(post => post.title.toLowerCase().includes(searchPhrase.toLowerCase()) || []);\n\n      // Пагинация: выбираем нужные статьи на основе текущей страницы и лимита\n      const startIndex = (page - 1) * limit;\n      const paginatedPosts = filteredPosts.slice(startIndex, startIndex + limit);\n      return {\n        posts: paginatedPosts.map(transformPost),\n        lastPage: Math.ceil(filteredPosts.length / limit)\n      };\n    });\n  } catch (e) {\n    console.log(e);\n  }\n};","map":{"version":3,"names":["transformPost","getPosts","searchPhrase","page","limit","searchQueryMain","fetch","then","response","json","loadedPosts","filteredPosts","filter","post","title","toLowerCase","includes","startIndex","paginatedPosts","slice","posts","map","lastPage","Math","ceil","length","e","console","log"],"sources":["/Users/evgeniapodoprigora/Desktop/practice/frontend/src/bff/api/get-posts.js"],"sourcesContent":["import { transformPost } from '../transformers';\n\nexport const getPosts = async (searchPhrase, page, limit) => {\n\tconst searchQueryMain = 'http://localhost:3005/posts';\n\ttry {\n\t\treturn fetch(searchQueryMain)\n\t\t\t.then((response) => response.json())\n\t\t\t.then((loadedPosts) => {\n\t\t\t\t// Фильтруем статьи по заголовку\n\t\t\t\tconst filteredPosts = loadedPosts.filter(\n\t\t\t\t\t(post) =>\n\t\t\t\t\t\tpost.title.toLowerCase().includes(searchPhrase.toLowerCase()) ||\n\t\t\t\t\t\t[],\n\t\t\t\t);\n\n\t\t\t\t// Пагинация: выбираем нужные статьи на основе текущей страницы и лимита\n\t\t\t\tconst startIndex = (page - 1) * limit;\n\t\t\t\tconst paginatedPosts = filteredPosts.slice(\n\t\t\t\t\tstartIndex,\n\t\t\t\t\tstartIndex + limit,\n\t\t\t\t);\n\n\t\t\t\treturn {\n\t\t\t\t\tposts: paginatedPosts.map(transformPost),\n\t\t\t\t\tlastPage: Math.ceil(filteredPosts.length / limit),\n\t\t\t\t};\n\t\t\t});\n\t} catch (e) {\n\t\tconsole.log(e);\n\t}\n};\n"],"mappings":"AAAA,SAASA,aAAa,QAAQ,iBAAiB;AAE/C,OAAO,MAAMC,QAAQ,GAAG,MAAAA,CAAOC,YAAY,EAAEC,IAAI,EAAEC,KAAK,KAAK;EAC5D,MAAMC,eAAe,GAAG,6BAA6B;EACrD,IAAI;IACH,OAAOC,KAAK,CAACD,eAAe,CAAC,CAC3BE,IAAI,CAAEC,QAAQ,IAAKA,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC,CACnCF,IAAI,CAAEG,WAAW,IAAK;MACtB;MACA,MAAMC,aAAa,GAAGD,WAAW,CAACE,MAAM,CACtCC,IAAI,IACJA,IAAI,CAACC,KAAK,CAACC,WAAW,CAAC,CAAC,CAACC,QAAQ,CAACd,YAAY,CAACa,WAAW,CAAC,CAAC,CAAC,IAC7D,EACF,CAAC;;MAED;MACA,MAAME,UAAU,GAAG,CAACd,IAAI,GAAG,CAAC,IAAIC,KAAK;MACrC,MAAMc,cAAc,GAAGP,aAAa,CAACQ,KAAK,CACzCF,UAAU,EACVA,UAAU,GAAGb,KACd,CAAC;MAED,OAAO;QACNgB,KAAK,EAAEF,cAAc,CAACG,GAAG,CAACrB,aAAa,CAAC;QACxCsB,QAAQ,EAAEC,IAAI,CAACC,IAAI,CAACb,aAAa,CAACc,MAAM,GAAGrB,KAAK;MACjD,CAAC;IACF,CAAC,CAAC;EACJ,CAAC,CAAC,OAAOsB,CAAC,EAAE;IACXC,OAAO,CAACC,GAAG,CAACF,CAAC,CAAC;EACf;AACD,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}